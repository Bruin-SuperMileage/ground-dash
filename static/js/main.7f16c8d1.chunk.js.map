{"version":3,"sources":["firebase.js","components/groundDash/controls.js","components/groundDash/header.js","components/toggleButton.js","components/groundDash/driver.js","components/groundDash/accelerometer.js","components/groundDash/environment.js","components/groundDash/motor.js","components/groundDash/hall-effect.js","components/groundDash/imu.js","components/groundDash/speed.js","components/groundDash/car.js","components/groundDash/joulemeter.js","components/groundDash/gps.js","components/groundDash/lap.js","components/groundDash/track.js","components/groundDash/line.js","components/groundDash.js","components/driverDash/lapDriver.js","components/driverDash/speedDriver.js","components/driverDash/speedometerDriver.js","components/driverDash.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","apiKeyHidden","authDomain","databaseURL","projectId","storageBucket","firebase","initializeApp","lapNumber","Header","React","Component","props","state","date","time","daysLeft","this","intervalID","setInterval","tick","today","Date","date1","toDateString","cmas","daysLeft1","Math","ceil","getTime","setState","toLocaleTimeString","clearInterval","className","role","aria-label","href","Driver","src","process","alt","Accelerometer","acceleration","accelerometer","toFixed","Environment","environment","altitude","temperature","Motor","motor","speed","cruise","Imu","imu","GyX","GyY","GyZ","Speed","console","log","RPMspeed","GPSspeed","Car","gps","Weather","latitude","longitude","startTimeMilli","convertedStart","stopTimeMilli","convertedStop","lapTimeMilli","lapTime","convertedLapTimes","database","convertTime","milliseconds","minute","seconds","milli","floor","pad","Number","prototype","size","s","String","length","GroundDash","style","paddingTop","joulemeter","magnetometer","halleffect","LapDriver","timerOn","timerStart","timerTime","isRunning","startTimer","now","timer","stopTimer","resetTimer","componentDidMount","lap","componentDidUpdate","render","centiseconds","slice","minutes","fourptthree","fourptthreecentiseconds","fourptthreeseconds","fourptthreeminutes","Lap","bind","SpeedDriver","parseFloat","SpeedometerDriver","minValue","maxValue","needleHeightRatio","maxSegmentLabels","segments","value","speedometer","textColor","width","height","needleTransition","ringWidth","paddingVertical","valueTextFontSize","labelFontSize","paddingHorizontal","App","useState","all","currentLap","running","pause","latestTime","setLatestTime","latestTrial","setLatestTrial","setAccelerometer","setEnvironment","setGPS","setHallEffect","setIMU","setJoulemeter","laptimes","setLapTimes","setMagnetometer","setMotor","setSpeed","latestData","setLatestData","useEffect","latestTime1","ref","on","snapshot","latestTrial1","val","child","exists","ViewToggle","which","labels","graphOneVals","graphTwoVals","dialogState1","dialogState2","lapLabels","changeDialogState","changeDialogStateTwo","track","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f16c8d1.chunk.js","sourcesContent":["import {apiKeyHidden} from './config';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Set the configuration for your app\r\n// TODO: Replace with your project's config object\r\n\r\nvar config = {\r\n  apiKey: apiKeyHidden,\r\n  authDomain: \"smv-daq.firebaseapp.com\",\r\n  databaseURL: \"https://smv-daq.firebaseio.com\",\r\n  projectId: \"smv-daq\",\r\n  storageBucket: \"bucket.appspot.com\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React from 'react';\r\nimport firebase from '../../firebase';\r\nimport 'firebase/database';\r\n\r\nvar startTimeMilli = \"\";\r\nvar convertedStart = \"\";\r\nvar stopTimeMilli = \"\";\r\nvar convertedStop = \"\";\r\nvar lapTimeMilli = [];\r\nvar lapTime = [];\r\nvar convertedLapTimes = [];\r\nvar lapNumber;\r\nlet database = firebase.database(); \r\n\r\nNumber.prototype.pad = function(size) {\r\n  var s = String(this);\r\n  while (s.length < (size || 2)) {s = \"0\" + s;}\r\n  return s;\r\n}\r\n  \r\nfunction convertTime(milliseconds) {\r\n  var minute, seconds, milli;\r\n  seconds = Math.floor(milliseconds / 1000);\r\n  minute = Math.floor(seconds / 60);\r\n  seconds = seconds % 60;\r\n  minute = minute % 60;\r\n  milli = milliseconds % 1000\r\n  return ((minute).pad(2) + \":\" + (seconds).pad(2) + \".\" + (milli).pad(3))\r\n}\r\n\r\nclass Controls extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.lap = this.lap.bind(this);\r\n    this.start = this.start.bind(this);\r\n    this.stop = this.stop.bind(this);\r\n  }\r\n\r\n  lap() {\r\n    var running;\r\n    database.ref(\"Running\").on('value', (snapshot) => {\r\n      running = snapshot.val();\r\n    });\r\n    if (running === \"True\")\r\n    {\r\n      var latestTrial;\r\n      database.ref(\"Latest Trial\").on('value', (snapshot) => {\r\n        latestTrial = snapshot.val();\r\n      });\r\n      database.ref(\"Lap\").on('value', (snapshot) => {\r\n        lapNumber = snapshot.val();\r\n      });\r\n      var update1 = {};\r\n      update1[\"Lap\"] = lapNumber+1;\r\n      var currentTime = Date.now();\r\n      lapTimeMilli.push(currentTime);\r\n      var pushTime;\r\n      if (lapTimeMilli.length === 1) {\r\n        pushTime = currentTime - startTimeMilli;\r\n      }\r\n      else {\r\n        pushTime = currentTime - lapTimeMilli[lapTimeMilli.length-2];\r\n      }\r\n      lapTime.push(pushTime);\r\n      var update2 = {};\r\n      update2[\"Fastest\"] = lapTime.indexOf(Math.min(...lapTime))+1;\r\n      update2[\"Slowest\"] = lapTime.indexOf(Math.max(...lapTime))+1;\r\n      var convertedLapTime = convertTime(pushTime);\r\n      convertedLapTimes.push(convertedLapTime);\r\n      firebase.database().ref().update(update1);\r\n      var lapFirebase = (lapNumber-1);\r\n      update2[lapFirebase] = convertedLapTime;\r\n      firebase.database().ref(latestTrial + \"/lap times\").update(update2);\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  start() {\r\n    var running;\r\n    database.ref(\"Running\").on('value', (snapshot) => {\r\n      running = snapshot.val();\r\n    });\r\n    if (running === \"True\")\r\n    {\r\n      var postData = \"True\";\r\n      var updates = {};\r\n      updates[\"drivingLap\"] = postData;\r\n      updates[\"Lap\"] = 1;\r\n      firebase.database().ref().update(updates);\r\n      startTimeMilli = Date.now();\r\n      var startTime = new Date(startTimeMilli)\r\n      convertedStart = startTime.getHours() + \":\" + startTime.getMinutes() + \":\" + startTime.getSeconds()\r\n      stopTimeMilli = \"\";\r\n      convertedStop = \"\";\r\n      lapTimeMilli = [];\r\n      lapTime = [];\r\n      convertedLapTimes = [];\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    var running, driving;\r\n    database.ref(\"Running\").on('value', (snapshot) => {\r\n      running = snapshot.val();\r\n    });\r\n    database.ref(\"drivingLap\").on('value', (snapshot) => {\r\n      driving = snapshot.val();\r\n    });\r\n    if (running === \"True\" && driving === \"True\")\r\n    {\r\n      var postData = \"False\";\r\n      var updates = {};\r\n      updates[\"drivingLap\"] = postData;\r\n      firebase.database().ref().update(updates);\r\n      stopTimeMilli = Date.now();\r\n      convertedStop = convertTime(stopTimeMilli-startTimeMilli);\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"controls\">\r\n        <div className=\"card-content\">\r\n          <div className=\"columns\">\r\n            <div className=\"column is-one-fifth\">\r\n            <button onClick={this.start} className=\"button is-primary control-button\">Start</button>\r\n            </div>\r\n            <div className=\"column\">\r\n              <p className=\"title is-5\">Time: {convertedStart}</p>\r\n            </div>\r\n          </div>\r\n          <hr/>\r\n          <div className=\"columns\">\r\n            <div className=\"column is-one-fifth\">\r\n            <button onClick={this.stop} className=\"button is-danger control-button\">Stop</button>\r\n            </div>\r\n            <div className=\"column\">\r\n              <p className=\"title is-5\">Time: {convertedStop}</p>\r\n            </div>\r\n          </div>\r\n          <hr/>\r\n          <div className=\"columns\">\r\n            <div className=\"column is-one-fifth\">\r\n            <button onClick={this.lap} className=\"button is-info control-button\">Lap</button>\r\n            </div>\r\n            <div className=\"column padding-left\">\r\n              <ol className=\"numInside\">\r\n                <p className=\"title is-5\">Time: {convertedLapTimes.map(item => {\r\n                  return <li key={item}>{item}</li>\r\n                  })}\r\n                </p>\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Controls;","import React from 'react';\r\n\r\nclass Header extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      date: \"\",\r\n      time: \"\",\r\n      daysLeft: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.intervalID = setInterval(\r\n      () => this.tick(),\r\n    );\r\n    var today = new Date();\r\n    var date1 = today.toDateString();\r\n    var cmas= new Date(2022, 3, 9);\r\n    var one_day=1000*60*60*24;\r\n    var daysLeft1 = \"Days to Competition: \" + (Math.ceil( (cmas.getTime()-today.getTime() )/ one_day ));\r\n    \r\n    this.setState({\r\n      date: date1,\r\n      daysLeft: daysLeft1\r\n    });\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      time: new Date().toLocaleTimeString()\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar is-fixed-top is-dark color-dark\" role=\"navigation\" aria-label=\"main navigation\">\r\n        <div className=\"navbar-brand\">\r\n          <a className=\"navbar-item\" href=\"https://www.bruinracing.com/smv/\">\r\n            <h1>Bruin SuperMileage</h1>\r\n          </a>\r\n        </div>\r\n        \r\n        <div className=\"navbar-end is-hidden-touch\">\r\n          {/* <div className=\"navbar-item\">\r\n          Made by A. Nagarajan, Continued by K. Nguyen\r\n          </div> */}\r\n          <div className=\"navbar-item\">\r\n            {this.state.daysLeft}\r\n          </div>\r\n          <div className=\"navbar-item\">\r\n          { this.state.date}\r\n          </div>\r\n          <div className=\"navbar-item\">\r\n            {this.state.time}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass ToggleButton extends React.Component {\r\n    render() {\r\n        return (\r\n        <button className=\"toggleButton\" >\r\n            <img src={(process.env.PUBLIC_URL + \"/images/icon.png\")} alt=\"toggle\" onClick={this.props.onClick}/>\r\n        </button>\r\n        );\r\n    }\r\n};\r\n\r\nexport default ToggleButton;\r\n","import React from 'react';\r\n\r\nclass Driver extends React.Component{\r\n  render() {\r\n    return (\r\n      <div className=\"card driver\">\r\n        <div className=\"columns\">\r\n          <div className=\"card-content column\">\r\n            <div>\r\n              <figure className=\"image is-96x96\">\r\n                <img src={process.env.PUBLIC_URL + \"/images/Caroline.jpg\"} alt=\"\"/>\r\n              </figure>\r\n\r\n              <div className=\"media-content\">\r\n              <p className=\"title is-4\">Caroline</p>\r\n              <p className=\"title is-6\">@CarolineDriver</p>\r\n              </div>\r\n\r\n              <div className=\"content\">\r\n                <p className=\"title is-6\">I Believe In You!!!</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"column\">\r\n            <img className=\"car-image is-pulled-right\" src={process.env.PUBLIC_URL + \"/images/car.png\"} alt=\"Not found\"/>  \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n   \r\nexport default Driver;","import React from 'react';\r\n\r\nclass Accelerometer extends React.Component{\r\n\r\n    render() {\r\n        var acceleration = ((this.props.accelerometer[\"acceleration x\"]**2 + \r\n        this.props.accelerometer[\"acceleration y\"]**2 +\r\n        this.props.accelerometer[\"acceleration z\"]**2)**0.5).toFixed(3);\r\n        return (\r\n          <div className=\"joulemeter\">\r\n               <div className=\"card-content\">\r\n                    <p className=\"title is-5\">Accelerometer</p>\r\n                    <p className=\"subtitle is-6\">Acceleration X: {this.props.accelerometer[\"acceleration x\"]} g</p>\r\n                    <p className=\"subtitle is-6\">Acceleration Y: {this.props.accelerometer[\"acceleration y\"]} g</p>\r\n                    <p className=\"subtitle is-6\">Acceleration Z: {this.props.accelerometer[\"acceleration z\"]} g</p>\r\n                    <p className=\"subtitle is-6\">Acceleration: {acceleration} g</p>\r\n               </div>\r\n          </div>\r\n        );\r\n     }\r\n};\r\n\r\n     \r\nexport default Accelerometer;","import React from 'react';\r\n\r\nclass Environment extends React.Component{\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"battery\">\r\n         <div className=\"card-content\">\r\n          <p className=\"title is-5\">Environment</p>\r\n          <p className=\"subtitle is-6\">Altitude: {this.props.environment.altitude} ft</p>\r\n          <p className=\"subtitle is-6\">Temperature: {this.props.environment.temperature} °C</p>\r\n         </div>\r\n      </div>\r\n    );\r\n   }\r\n};\r\n\r\n   \r\nexport default Environment;","import React from 'react';\r\n\r\nclass Motor extends React.Component{\r\n  render() {\r\n    return (\r\n      <div className=\"motor\">\r\n        <div className=\"card-content\">\r\n          <p className=\"title is-5\">Motor</p>\r\n          <p className=\"subtitle is-6\">Speed: {this.props.motor.speed} mph</p>\r\n          <p className=\"subtitle is-6\">Cruise: {this.props.motor.cruise}</p>\r\n          <p className=\"subtitle is-6\">Desired RPM: {this.props.motor[\"desiredRPM\"]} RPM</p>\r\n          <p className=\"subtitle is-6\">Filtered RPM: {this.props.motor[\"filteredRPM\"]} RPM</p>\r\n        </div>\r\n      </div>\r\n    );\r\n   }\r\n};\r\n\r\n   \r\nexport default Motor;","import React from 'react';\r\n\r\nclass HallEffect extends React.Component{\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"speed\">\r\n         <div className=\"card-content\">\r\n          <p className=\"title is-4\">Speed: {this.props.halleffect.speed} m/s</p>\r\n          <p className=\"title speed-title is-6 is-spaced\">RPM: {this.props.halleffect.rpm} rpm</p>\r\n          <p className=\"subtitle speed-title is-6 is-spaced\">Throttle: {this.props.halleffect.throttle}%</p>\r\n         </div>\r\n      </div>\r\n    );\r\n   }\r\n};\r\n\r\nexport default HallEffect;","import React from 'react';\r\n\r\nclass Imu extends React.Component{\r\n  render() {\r\n    return (\r\n      <div className=\"joulemeter\">\r\n        <div className=\"card-content\">\r\n          <p className=\"title is-5\">Gyroscope</p>\r\n          <p className=\"subtitle is-6\">Gyroscopic X: {this.props.imu.GyX} deg/s</p>\r\n          <p className=\"subtitle is-6\">Gyroscopic Y: {this.props.imu.GyY} deg/s</p>\r\n          <p className=\"subtitle is-6\">Gyroscopic Z: {this.props.imu.GyZ} deg/s</p>\r\n          {/* <p className=\"subtitle is-6\">Heading: {this.props.imu.heading}°</p>\r\n          <p className=\"subtitle is-6\">Pitch: {this.props.imu.pitch}°</p>\r\n          <p className=\"subtitle is-6\">Roll: {this.props.imu.roll}°</p> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Imu;","import React from 'react';\r\n\r\nclass Speed extends React.Component{\r\n\r\n  render() {\r\n    console.log(this.props.speed)\r\n    return (\r\n      <div className=\"speed\">\r\n            <div className=\"card-content\">\r\n                <p className=\"title is-4\">RPM Speed: {this.props.speed.RPMspeed} mph</p>\r\n                <p className=\"title is-4\">GPS Speed: {this.props.speed.GPSspeed} mph</p>\r\n                {/* <p className=\"title is-4\">Speed: {this.props.speed.speed} m/s</p>\r\n                \r\n                <p className=\"title speed-title is-6 is-spaced\">RPM: {this.props.speed.rpm} rpm</p>\r\n                <p className=\"subtitle speed-title is-6 is-spaced\">Throttle: {this.props.speed.throttle}%</p>\r\n                <p className=\"subtitle speed-title is-6 is-spaced\">X Accel: {this.props.speed[\"acceleration x\"]} m/s<sup>2</sup></p>\r\n                <p className=\"subtitle speed-title is-6 is-spaced\">Y Accel: {this.props.speed[\"acceleration y\"]} m/s<sup>2</sup></p>\r\n                <p className=\"subtitle speed-title is-6 is-spaced\">Z Accel: {this.props.speed[\"acceleration z\"]} m/s<sup>2</sup></p>\r\n                \r\n                <p className=\"subtitle is-6\">Avg Speed: {this.props.speed.avg} mph</p>\r\n                <p className=\"subtitle is-6\"></p> */}\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Speed;","import React from 'react';\r\nimport Accelerometer from './accelerometer';\r\nimport Environment from './environment';\r\nimport HallEffect from './hall-effect'\r\nimport Motor from './motor';\r\nimport Imu from './imu';\r\nimport Speed from './speed';\r\nimport Joulemeter from './joulemeter';\r\n\r\nclass Car extends React.Component{\r\n    render() {\r\n        return (\r\n          <div className=\"card car\">\r\n               <div className=\"columns\">\r\n                    <div className=\"column\">\r\n                         {/* <J oulemeter joulemeter={this.props.joulemeter} /> */}\r\n                         <Accelerometer accelerometer={this.props.accelerometer} />\r\n                         <Environment environment={this.props.environment} />\r\n                         \r\n                    </div>\r\n                    <div className=\"column\">\r\n                         {/* <HallEffect halleffect={this.props.halleffect} /> */}\r\n                         {/* <Magnetometer magnetometer={this.props.magnetometer}/> */}\r\n                         <Motor motor={this.props.motor}/>\r\n                         <Imu imu={this.props.imu}/>\r\n                    </div>\r\n                    <div className=\"column\">\r\n                        <Speed speed={{GPSspeed:this.props.gps.speed,RPMspeed:this.props.motor.speed}}/>\r\n                    </div>\r\n               </div>\r\n          </div>\r\n        );\r\n     }\r\n};\r\n\r\n     \r\nexport default Car;","import React from 'react';\r\n\r\nclass Joulemeter extends React.Component{\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"joulemeter\">\r\n            <div className=\"card-content\">\r\n                <p className=\"title is-4\">Joulemeter</p>\r\n                <p className=\"title is-6\">{this.props.joulemeter.voltage} V | {this.props.joulemeter.current} A</p>\r\n                <p className=\"title is-6 is-spaced\">Power: {this.props.joulemeter.power} W</p>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n};\r\n\r\n     \r\nexport default Joulemeter;","import React from 'react';\r\n\r\nclass Weather extends React.Component{\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"GPS\">\r\n        <div className=\"card-content GPS\">\r\n          <p className=\"title is-6\">Latitude: {this.props.gps.latitude}</p>\r\n          <p className=\"title is-6\">Longitude: {this.props.gps.longitude}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n   }\r\n};\r\n\r\nexport default Weather;","import React from 'react';\r\nimport firebase from '../../firebase';\r\nimport 'firebase/database';\r\n\r\nclass Lap extends React.Component{\r\n  constructor(props) {\r\n  super(props)\r\n  this.startTimer = this.startTimer.bind(this)\r\n  this.stopTimer = this.stopTimer.bind(this)\r\n  this.resetTimer = this.resetTimer.bind(this)\r\n  this.resetTimer2 = this.resetTimer2.bind(this)\r\n  }\r\n  \r\n  state = {\r\n    timerOn: false,\r\n    timerStart: 0,\r\n    timerStart2: 0,\r\n    timerTime: 0,\r\n    timerTimeReset: 0,\r\n    isRunning: \"False\",\r\n    lapNumber: 1\r\n  };\r\n  \r\n  startTimer = () => {\r\n    this.setState({\r\n      timerOn: true,\r\n      timerTime: this.state.timerTime,\r\n      timerTimeReset: this.state.timerTimeReset,\r\n      timerStart: Date.now() - this.state.timerTime,\r\n      timerStart2: Date.now() - this.state.timerTimeReset\r\n    });\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n      timerTime: Date.now() - this.state.timerStart,\r\n      timerTimeReset: Date.now() - this.state.timerStart2\r\n      });\r\n    }, 50);\r\n\r\n  };\r\n  \r\n  stopTimer = () => {\r\n    console.log(\"stopTimer\")\r\n    this.setState({ \r\n      timerOn: false \r\n    });\r\n    clearInterval(this.timer);\r\n  };\r\n  \r\n  resetTimer = () => {\r\n    this.setState({\r\n      timerStart: Date.now(),\r\n      timerTime: 0,\r\n    });\r\n  };\r\n  \r\n  resetTimer2 = () => {\r\n    this.setState({\r\n      timerStart2: Date.now(),\r\n      timerTimeReset: 0,\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    console.log(\"mount\")\r\n    var drivingLap;\r\n    firebase.database().ref(\"drivingLap\").on('value', (snapshot) => {\r\n      drivingLap = snapshot.val();\r\n    })\r\n    if (drivingLap === \"True\") {\r\n      this.resetTimer();\r\n      this.startTimer();\r\n      this.setState({\r\n        isRunning: \"True\",\r\n      })\r\n    }\r\n    else if (drivingLap === \"False\") {\r\n      this.stopTimer();\r\n      this.setState({\r\n        isRunning: \"False\"\r\n      })\r\n    }  \r\n  };\r\n  \r\n  componentDidUpdate = (prevprops) => {\r\n    console.log(\"update\")\r\n    const {isRunning, lapNumber} = this.state;\r\n    var drivingLap;\r\n    let database = firebase.database();\r\n    database.ref(\"drivingLap\").on('value', (snapshot) => {\r\n      drivingLap = snapshot.val();\r\n    console.log(\"drivingLap: \" + drivingLap)\r\n    if (isRunning !== drivingLap) {\r\n      if (drivingLap === \"True\") {\r\n        console.log(\"start\");\r\n        this.startTimer();\r\n        this.resetTimer();\r\n        this.setState({\r\n          isRunning: \"True\"\r\n        })\r\n      }\r\n      else if (drivingLap === \"False\") {\r\n        console.log(\"stop\")\r\n        this.stopTimer();\r\n        this.setState({\r\n          isRunning: \"False\"\r\n        })\r\n      }\r\n    }\r\n    if (lapNumber !== this.props.lap) {\r\n      this.resetTimer2();\r\n      this.setState({\r\n        lapNumber: this.props.lap\r\n      })\r\n    }\r\n  })\r\n  }\r\n\r\n  render() {\r\n    let latestTrial;\r\n    let peakTimes = {};\r\n    let database = firebase.database();\r\n    let exists;\r\n    database.ref(\"Latest Trial\").on('value', (snapshot) => {\r\n      latestTrial = snapshot.val();\r\n    });\r\n    database.ref(latestTrial).on('value', (snapshot) => {\r\n      exists = snapshot.child(\"lap times\").exists();\r\n    })\r\n    database.ref(latestTrial + \"/lap times\").on('value', (snapshot) => {\r\n      peakTimes = snapshot.val();\r\n    });\r\n    let slowestTime = \"\";\r\n    let fastestTime = \"\";\r\n    let slowestLap = \"0\";\r\n    let fastestLap = \"0\";\r\n    if (exists === true) {\r\n      slowestLap = peakTimes[\"Slowest\"];\r\n      fastestLap = peakTimes[\"Fastest\"];\r\n      slowestTime = peakTimes[slowestLap];\r\n      fastestTime = peakTimes[fastestLap];\r\n    }\r\n    const { timerTime, timerTimeReset } = this.state;\r\n    let centiseconds = (\"0\" + (Math.floor(timerTimeReset / 10) % 100)).slice(-2);\r\n    let seconds = (\"0\" + (Math.floor(timerTimeReset / 1000) % 60)).slice(-2);\r\n    let minutes = (\"0\" + (Math.floor(timerTimeReset / 60000) % 60)).slice(-2);\r\n    const fourptthree = 1800000 - timerTime;\r\n    let fourptthreecentiseconds = (\"0\" + (Math.floor(fourptthree / 10) % 100)).slice(-2);\r\n    let fourptthreeseconds = (\"0\" + (Math.floor(fourptthree / 1000) % 60)).slice(-2);\r\n    let fourptthreeminutes = (\"0\" + (Math.floor(fourptthree / 60000) % 60)).slice(-2);\r\n    return (\r\n    <div>\r\n      <div className=\"columns\">\r\n        <div className=\"column\">\r\n            <div className=\"card-content\">\r\n              <p className=\"title is-6\">Lap: {this.props.lap}</p>\r\n              <p className=\"subtitle is-6\">Lap Time: {minutes}:{seconds}.{centiseconds} </p>\r\n              <p className=\"subtitle is-6\">Time Remaining: {fourptthreeminutes}:{fourptthreeseconds}.{fourptthreecentiseconds} </p>\r\n            </div>\r\n        </div>\r\n        <div className=\"column\">\r\n            <div className=\"card-content\">\r\n              <p className=\"subtitle is-6\">\r\n                Slowest Lap: {slowestLap} {slowestTime}\r\n              </p>\r\n              <p className=\"subtitle is-6\">\r\n                Fastest Lap: {fastestLap} {fastestTime}\r\n              </p>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Lap;","import React from 'react';\r\nimport Lap from './lap';\r\nimport GPS from './gps';\r\nimport Controls from './controls';\r\n\r\nclass Track extends React.Component{\r\n  render() {\r\n    return (\r\n      <div className=\"card track\">\r\n        <div className=\"columns\">\r\n            <div className=\"column\">\r\n              <div className=\"card-content\">\r\n                <p className=\"title is-4\">Indianapolis Motor Speedway</p>\r\n                <p className=\"title is-6\">Latest Trial: {this.props.latestTrial} </p>\r\n              </div>\r\n              <GPS gps={this.props.gps}/>\r\n            </div>\r\n        </div>\r\n        {/* <Lap lap={this.props.lap}/> */}\r\n        <div className=\"card-image\">\r\n          {/* <Controls/> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n  \r\nexport default Track;","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport 'chartjs-plugin-annotation';\r\nimport 'chartjs-plugin-streaming';\r\n\r\nclass LineGraph extends React.Component{\r\n  constructor(props) {\r\n    super(props)\r\n    this.onRefresh = this.onRefresh.bind(this);\r\n  }\r\n\r\n  onRefresh = (chart) => {\r\n    var dataVals = this.props.vals;\r\n    chart.data.datasets.forEach(function (dataset){\r\n      dataset.data.push({\r\n        x: Date.now(),\r\n        y: dataVals\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    var pause = this.props.pause;\r\n    var data = {\r\n      labels: this.props.labels,\r\n      datasets: [{\r\n        label: this.props.name,\r\n        fill: true,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n      }]\r\n    }\r\n    var options = {\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        xAxes: [{\r\n          //type: 'realtime',\r\n          gridLines: { display: true }, \r\n          type: \"time\", \r\n          time: { parser: \"DD/MM/YYYY\" },\r\n          realtime: {\r\n            refresh: 250,\r\n            onRefresh: this.onRefresh,\r\n            delay: 1000,\r\n            pause: pause,\r\n          }\r\n        }]\r\n      }\r\n    }\r\n    var changeDialogState = this.props.changeDialogState;\r\n    return (\r\n      <div>\r\n        <select onChange={changeDialogState}>\r\n          <option style={{display: \"none\"}}>Pick parameter to display</option>\r\n          <option value=\"hall-effect|rpm\">RPM</option>\r\n          <option value=\"hall-effect|speed\">Speed</option>\r\n          <option value=\"hall-effect|throttle\">Throttle</option>\r\n          <option value=\"accelerometer|acceleration x\">Acceleration X</option>\r\n          <option value=\"accelerometer|acceleration y\">Acceleration Y</option>\r\n          <option value=\"accelerometer|acceleration z\">Acceleration Z</option>\r\n          <option value=\"joulemeter|current\">Current</option>\r\n          <option value=\"joulemeter|power\">Power</option>\r\n          <option value=\"joulemeter|voltage\">Voltage</option>\r\n          <option value=\"magnetometer|MagX\">MagX</option>\r\n          <option value=\"magnetometer|MagY\">MagY</option>\r\n          <option value=\"magnetometer|MagZ\">MagZ</option>\r\n          <option value=\"gyroscope|GyX\">GyX</option>\r\n          <option value=\"gyroscope|GyY\">GyY</option>\r\n          <option value=\"gyroscope|GyZ\">GyZ</option>\r\n          <option value=\"gyroscope|heading\">Heading</option>\r\n          <option value=\"gyroscope|pitch\">Pitch</option>\r\n          <option value=\"gyroscope|roll\">Roll</option>\r\n          <option value=\"gps|latitude\">Latitude</option>\r\n          <option value=\"gps|longitude\">Longitude</option>\r\n          <option value=\"environment|altitude\">Altitude</option>\r\n          <option value=\"environment|temperature\">Temperature</option>\r\n        </select>\r\n        <div className=\"card\">\r\n          <div className=\"card-image\">\r\n            <Line ref=\"chart\" data={data} height={1000} options={options} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default LineGraph;\r\n","import React from 'react';\r\n\r\nimport Header from './groundDash/header';\r\nimport Driver from './groundDash/driver';\r\nimport Car from './groundDash/car';\r\nimport Track from './groundDash/track';\r\nimport LineGraph from './groundDash/line'\r\n\r\nfunction capitalize(str) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\nclass GroundDash extends React.Component{\r\n  render() {\r\n    //var name1 = this.props.dialogState1.split(\"|\")[1].split(' ').map(capitalize).join(' ');\r\n    //var name2 = this.props.dialogState2.split(\"|\")[1].split(' ').map(capitalize).join(' ');\r\n    return (\r\n      <div className=\"groundDash canvas color-dark\" style={{paddingTop: '45px'}}>\r\n        <Header/>\r\n        <div className=\"columns\">\r\n          <div className=\"column\">  \r\n            <Driver/>\r\n            <Car \r\n            joulemeter={this.props.joulemeter} \r\n            environment={this.props.environment} \r\n            magnetometer={this.props.magnetometer} \r\n            imu={this.props.imu} \r\n            accelerometer={this.props.accelerometer} \r\n            halleffect={this.props.halleffect}\r\n            motor = {this.props.motor} \r\n            gps={this.props.gps}/>\r\n          </div>\r\n          {/* <div className=\"column\">\r\n            <Track \r\n            gps={this.props.gps} \r\n            lap={this.props.lap} \r\n            track={this.props.track}\r\n            latestTrial={this.props.latestTrial}\r\n            />\r\n            </div> */}\r\n        </div>\r\n        {/* <div className=\"columns\">\r\n          <div className=\"column\">\r\n            <LineGraph labels={this.props.labels} vals={this.props.graphOneVals} name={name1} changeDialogState={this.props.changeDialogState} lapLabels={this.props.lapLabels} pause={this.props.pause}/>\r\n          </div>\r\n          <div className=\"column\">\r\n            <LineGraph labels={this.props.labels} vals={this.props.graphTwoVals} name={name2} changeDialogState={this.props.changeDialogStateTwo} lapLabels={this.props.lapLabels} pause={this.props.pause}/>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n     \r\nexport default GroundDash;","import React from 'react';\r\n\r\nclass LapDriver extends React.Component{\r\n  constructor(props) {\r\n    super(props)\r\n    this.startTimer = this.startTimer.bind(this)\r\n    this.stopTimer = this.stopTimer.bind(this)\r\n    this.resetTimer = this.resetTimer.bind(this)\r\n  }\r\n  \r\n  state = {\r\n    timerOn: false,\r\n    timerStart: 0,\r\n    timerTime: 0,\r\n    isRunning: \"False\",\r\n    lapNumber: 1\r\n  };\r\n\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerOn: true,\r\n      timerTime: this.state.timerTime,\r\n      timerStart: Date.now() - this.state.timerTime,\r\n      isRunning: \"True\"\r\n    });\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n        timerTime: Date.now() - this.state.timerStart\r\n      });\r\n    }, 10);\r\n  };\r\n\r\n  stopTimer = () => {\r\n    this.setState({ \r\n      timerOn: false,\r\n      isRunning: \"False\"\r\n     });\r\n    clearInterval(this.timer);\r\n  };\r\n\r\n  resetTimer = () => {\r\n    this.setState({\r\n      timerStart: Date.now(),\r\n      timerTime: 0,\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.lap[\"drivingLap\"] === \"True\") {\r\n      if (this.props.lap[\"drivingLap\"] === \"True\") {\r\n        this.resetTimer();\r\n        this.startTimer();\r\n      }\r\n      else if (this.props.lap[\"drivingLap\"] === \"False\") {\r\n        this.stopTimer();\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    const {isRunning, lapNumber } = this.state;\r\n    if (isRunning !== this.props.lap[\"drivingLap\"]) {\r\n      if (this.props.lap[\"drivingLap\"] === \"True\") {\r\n        this.startTimer();\r\n        this.resetTimer();\r\n        this.setState({\r\n          isRunning: \"True\"\r\n        })\r\n      }\r\n      else if (this.props.lap[\"drivingLap\"] === \"False\") {\r\n        this.stopTimer();\r\n        this.setState({\r\n          isRunning: \"False\"\r\n        })\r\n      }\r\n    }\r\n    if (lapNumber !== this.props.lap[\"Lap\"]) {\r\n      this.resetTimer();\r\n      this.setState({\r\n        lapNumber: this.props.lap[\"Lap\"]\r\n      })\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    const { timerTime } = this.state;\r\n    let centiseconds = (\"0\" + (Math.floor(timerTime / 10) % 100)).slice(-2);\r\n    let seconds = (\"0\" + (Math.floor(timerTime / 1000) % 60)).slice(-2);\r\n    let minutes = (\"0\" + (Math.floor(timerTime / 60000) % 60)).slice(-2);\r\n    const fourptthree = 260000 - timerTime;\r\n    let fourptthreecentiseconds = (\"0\" + (Math.floor(fourptthree / 10) % 100)).slice(-2);\r\n    let fourptthreeseconds = (\"0\" + (Math.floor(fourptthree / 1000) % 60)).slice(-2);\r\n    let fourptthreeminutes = (\"0\" + (Math.floor(fourptthree / 60000) % 60)).slice(-2);\r\n    return (\r\n      <div>\r\n        <div className=\"lap\">\r\n            <div className=\"card-content columns\">\r\n                <div className=\"column\">\r\n                  <p>Lap {this.props.lap.Lap}</p>\r\n                  <p>Remaining</p>\r\n                </div>\r\n                <div className=\"column\">\r\n                  <p>{minutes} : {seconds} : {centiseconds}</p>\r\n                  <p>{fourptthreeminutes} : {fourptthreeseconds} : {fourptthreecentiseconds}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n     \r\nexport default LapDriver;","import React from 'react';\r\n\r\nclass SpeedDriver extends React.Component{\r\n    render() {\r\n        return (\r\n          <div className=\"columns\">\r\n               <div className=\"column\">\r\n                    <p className = \"speed has-text-centered big\">{parseFloat(this.props.speed.speed*2.23694).toFixed(1)}</p>\r\n                    <p className = \"speed has-text-centered km\">mph</p>\r\n               </div>\r\n          </div>\r\n        );\r\n     }\r\n};\r\n\r\nexport default SpeedDriver;","import React from 'react';\r\nimport ReactSpeedometer from \"react-d3-speedometer\";\r\n\r\nclass SpeedometerDriver extends React.Component{\r\n    render() {\r\n        return (\r\n          <div className=\"columns\">\r\n               <div className=\"column has-text-centered\">\r\n                <ReactSpeedometer\r\n                    minValue={0}\r\n                    maxValue={70}\r\n                    needleHeightRatio={0.8}\r\n                    maxSegmentLabels={8}\r\n                    segments={5555}\r\n                    value={this.props.speedometer.speed}\r\n                    textColor={\"white\"}\r\n                    width={1000}\r\n                    height={450}\r\n                    needleTransition={\"easePolyIn\"}\r\n                    ringWidth={120}\r\n                    paddingVertical={150}\r\n                    valueTextFontSize={'0'}\r\n                    labelFontSize={'50'}\r\n                    paddingHorizontal={100}\r\n                />\r\n               </div>\r\n          </div>\r\n        );\r\n     }\r\n};\r\n\r\nexport default SpeedometerDriver;","import React from 'react';\r\n\r\nimport LapDriver from './driverDash/lapDriver';\r\nimport SpeedDriver from './driverDash/speedDriver';\r\nimport SpeedometerDriver from './driverDash/speedometerDriver';\r\n\r\nclass Driver extends React.Component{\r\n    render() {\r\n        return (\r\n            <div className=\"canvas color-dark driverDash\" style={{paddingTop: '45px'}}>\r\n              <div className=\"columns is-vcentered\">\r\n                <div className=\"column is-one-third\">   \r\n                  <SpeedDriver \r\n                  speed={this.props.speed} />\r\n                </div>\r\n                <div className=\"column\">\r\n                  <SpeedometerDriver \r\n                  speedometer={this.props.speed}/>\r\n                  <LapDriver \r\n                  lap={this.props.lap} />  \r\n                </div>\r\n              </div>\r\n            </div>\r\n        );\r\n     }\r\n};\r\n\r\n     \r\nexport default Driver;","import React,{useState,useEffect,useReducer} from 'react';\r\nimport firebase from './firebase';\r\nimport 'firebase/database';\r\nimport './App.css';\r\n\r\nimport ToggleButton from './components/toggleButton';\r\nimport GroundDash from './components/groundDash';\r\nimport DriverDash from './components/driverDash';\r\nimport { database } from 'firebase';\r\n\r\nconst App = () => {\r\n  const [all, setAll] = useState({});\r\n  const [currentLap,setCurrentLap] = useState(0);\r\n  const [running, setRunning] = useState(false)\r\n  const [pause, setPause] = useState(false)\r\n  const [latestTime, setLatestTime] = useState(\"\")\r\n  const [latestTrial, setLatestTrial] = useState(\"\")\r\n  const [accelerometer, setAccelerometer] = useState(0)\r\n  const [environment, setEnvironment] = useState(0);\r\n  const [gps, setGPS] = useState(0);\r\n  const [halleffect, setHallEffect] = useState(0);\r\n  const [imu, setIMU] = useState(0);\r\n  const [joulemeter, setJoulemeter] = useState(0);\r\n  const [laptimes, setLapTimes] = useState(0);\r\n  const [magnetometer, setMagnetometer] = useState(0);\r\n  const [motor, setMotor] = useState({});\r\n  const [speed, setSpeed] = useState(0);\r\n  const [latestData, setLatestData] = useState({})\r\n\r\n  // const [latestTimeUpdate, setLatestTimeUpdate] = useState(\"\")\r\n\r\n  // setInterval(() => {\r\n  //   console.log(\"checkdifference\");\r\n  //   let database = firebase.database();\r\n  //   var current = new Date();\r\n  //   var difference = Math.abs(this.state.latestTimeUpdate - current);\r\n  //   if (difference > 2500) {\r\n  //     var update = {};\r\n  //     update[\"Running\"] = \"False\";\r\n  //     database.ref().update(update);\r\n  //     setPause(true);\r\n  //   }\r\n  // },5000);\r\n\r\n  useEffect( ()=> {\r\n    let database = firebase.database();\r\n    var latestTime1;\r\n    database.ref(\"Latest Time\").on('value', (snapshot) => {\r\n      latestTime1 = snapshot.val();\r\n      var latestTrial1;\r\n      setLatestTime(latestTime1);\r\n      database.ref(\"Latest Trial\").on('value', (snapshot) => {\r\n        latestTrial1 = snapshot.val();\r\n        setLatestTrial(latestTrial1);\r\n        database.ref(latestTrial1).child(latestTime1).on('value', (snapshot) => {\r\n          if (snapshot.exists() === false)\r\n            return;\r\n          var latestData = snapshot.val();\r\n          setLatestData(latestData);\r\n          setAccelerometer(latestData);\r\n          setEnvironment(latestData);\r\n          setGPS(latestData);\r\n          setHallEffect(latestData);\r\n          setIMU(latestData);\r\n          setJoulemeter(latestData);\r\n          setLapTimes(latestData);\r\n          setMagnetometer(latestData);\r\n          setMotor(latestData);\r\n          setSpeed(latestData);\r\n        });\r\n      });\r\n    });\r\n  },[])\r\n\r\n  return (\r\n    <div>\r\n      <ViewToggle props={{joulemeter: joulemeter,\r\n      all: all,\r\n      currentLap: currentLap,\r\n      running: running,\r\n      pause: pause,\r\n      latestTime: latestTime,\r\n      latestTrial: latestTrial,\r\n      accelerometer: accelerometer,\r\n      environment: environment,\r\n      gps: gps,\r\n      halleffect: halleffect,\r\n      imu: imu,\r\n      laptimes: laptimes,\r\n      magnetometer: magnetometer,\r\n      motor: motor,\r\n      speed: speed,\r\n      latestData: latestData,\r\n      which: \"ground\",\r\n      }} /* changeDialogState={changeDialogState} changeDialogStateTwo={changeDialogStateTwo} *//>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\nfunction ViewToggle(props) {\r\n  let {which,\r\n    joulemeter,\r\n    environment,\r\n    magnetometer,\r\n    imu, \r\n    accelerometer, \r\n    halleffect, \r\n    gps, \r\n    currentLap,\r\n    labels,\r\n    graphOneVals,\r\n    graphTwoVals,\r\n    dialogState1,\r\n    dialogState2,\r\n    lapLabels,\r\n    pause,\r\n    motor,\r\n    latestTime,\r\n    latestTrial}  = props.props;\r\n    var changeDialogState = props.changeDialogState;\r\n    var changeDialogStateTwo = props.changeDialogStateTwo;\r\n  if (which === \"ground\") {\r\n      return <GroundDash \r\n      joulemeter={joulemeter} \r\n      environment={environment} \r\n      magnetometer={magnetometer} \r\n      imu={imu} \r\n      accelerometer={accelerometer} \r\n      halleffect={halleffect} \r\n      gps={gps} \r\n      lap={currentLap} \r\n      track={{}}\r\n      labels={labels}\r\n      graphTwoVals={graphTwoVals}\r\n      graphOneVals={graphOneVals}\r\n      changeDialogState={changeDialogState}\r\n      changeDialogStateTwo={changeDialogStateTwo}\r\n      dialogState1={dialogState1}\r\n      dialogState2={dialogState2}\r\n      lapLabels={lapLabels}\r\n      pause={pause}\r\n      latestTrial={latestTrial}\r\n      motor={motor}\r\n      latestTime={latestTime}\r\n       />\r\n  }\r\n  else if (which === \"driver\" ) {\r\n      return <DriverDash \r\n      speed={halleffect} \r\n      speedometer={halleffect} \r\n      lap={currentLap} />\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}